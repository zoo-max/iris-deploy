# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18j2qAx3H8Sctao4LNAuwuRUyoPe6qp5u
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Load model
with open("model.pkl", "rb") as f:
    model = pickle.load(f)

# Load Iris dataset
iris = load_iris()
df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
df['target'] = iris.target
target_names = iris.target_names

# Sidebar navigation
st.sidebar.title("Iris Classifier")
page = st.sidebar.radio("Go to", ["Data Description", "Prediction", "Model Info"])

# Page 1: Data Description
if page == "Data Description":
    st.title("ðŸŒ¸ Iris Dataset Overview")
    st.write("""
    The **Iris flower dataset** is a classic dataset used in pattern recognition.
    It includes 3 species: *Setosa*, *Versicolor*, and *Virginica*.
    """)
    st.write("### Dataset Preview")
    st.dataframe(df.head())

    st.write("### Feature Distribution")
    fig = sns.pairplot(df, hue='target', palette='husl', markers=["o", "s", "D"])
    st.pyplot(fig)

# Page 2: Prediction
elif page == "Prediction":
    st.title("ðŸ”® Predict Iris Flower Type")

    st.write("Input the flower measurements below:")
    sepal_length = st.slider("Sepal Length (cm)", 4.0, 8.0, 5.1)
    sepal_width = st.slider("Sepal Width (cm)", 2.0, 4.5, 3.5)
    petal_length = st.slider("Petal Length (cm)", 1.0, 7.0, 1.4)
    petal_width = st.slider("Petal Width (cm)", 0.1, 2.5, 0.2)

    input_data = np.array([[sepal_length, sepal_width, petal_length, petal_width]])
    prediction = model.predict(input_data)[0]
    predicted_species = target_names[prediction]

    if st.button("Predict"):
        st.success(f"The predicted iris species is: **{predicted_species.capitalize()}** ðŸŒ¼")

# Page 3: Model Info
else:
    st.title("ðŸ“Š Model Information")

    st.write("This page shows some basic evaluation of the trained model.")
    X, y = iris.data, iris.target
    predictions = model.predict(X)
    acc = accuracy_score(y, predictions)
    st.write(f"**Accuracy on full dataset:** {acc:.2f}")

    st.write("### Confusion Matrix")
    cm = confusion_matrix(y, predictions)
    fig, ax = plt.subplots()
    sns.heatmap(cm, annot=True, fmt='d', xticklabels=target_names, yticklabels=target_names, cmap='Blues', ax=ax)
    ax.set_xlabel("Predicted")
    ax.set_ylabel("Actual")
    st.pyplot(fig)